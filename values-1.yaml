clusterName: "elasticsearch"
nodeGroup: "master"

roles:
- master
- data
- ingest

replicas: 1 # Single-node setup

createCert: true # Self-signed certs, automatically creating TLS secret

secret:
  enabled: true
  password: "iliass" # For testing, consider using a Kubernetes Secret instead

image: "docker.elastic.co/elasticsearch/elasticsearch"
imageTag: "8.5.1"
imagePullPolicy: "IfNotPresent"

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

networkHost: "0.0.0.0" # Allow Elasticsearch to bind to all network interfaces

# Volume claim for persistence
persistence:
  enabled: true
  labels: {}
  annotations: {}
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 10Gi
    storageClassName: "standard" # Adjust according to your Kind storage class

# Readiness probe settings for stability on single node
readinessProbe:
  failureThreshold: 10 # Allow more retries before marking unhealthy
  initialDelaySeconds: 30 # Delay probe to let Elasticsearch initialize
  periodSeconds: 15 # Periodically check with time between checks
  timeoutSeconds: 10 # Allow more time for each check
clusterHealthCheckParams: "wait_for_status=yellow&timeout=30s" # Wait for yellow status

# Ingress configuration
ingress:
  enabled: true
  hosts:
  - host: es-elk.s9.devopscloud.link # Update with your actual hostname
    paths:
    - path: /
      pathType: Prefix
  tls:
  - secretName: elasticsearch-tls
    hosts:
    - es-elk.s9.devopscloud.link

# Sysctl settings
sysctlVmMaxMapCount: 262144

# Termination grace period to ensure clean shutdown
terminationGracePeriod: 300

# Anti-affinity and node selector for single node
antiAffinity: "soft" # Switch to soft anti-affinity for single-node setup
nodeSelector:
  kubernetes.io/hostname: "elk-kafka-control-plane" # Adjust to your node name if needed

# Pod Security and permissions
podSecurityPolicy:
  create: false
  spec:
    privileged: true
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
    - secret
    - configMap
    - persistentVolumeClaim
    - emptyDir

# Service configurations
service:
  enabled: true
  type: ClusterIP
  httpPortName: http
  transportPortName: transport

# Security context for Elasticsearch containers
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
securityContext:
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000

# Update strategy and Pod scheduling
updateStrategy: RollingUpdate
maxUnavailable: 1

# Miscellaneous settings
rbac:
  create: false
  automountToken: true

tests:
  enabled: true
